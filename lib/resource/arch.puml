@startuml
''' JPEG Lib Definitions '''
namespace Jpeg {
class Decoder {
}
}

''' Bitmap Lib Definitions '''
namespace Bitmap {
class Decoder { 
}
}

''' TFLite Definitions '''
namespace tflite {
class FlatModelBuffer {

}
class Interpreter {
}
}

namespace perception{ 
''' Data Structures '''
class CLIOptions << (S,#FF7700) >> {
}

''' Interfaces '''
interface IArgumentParser {
    + {abstract} GetParsedArgs(): CLIOptions
    + {abstract} ParseArgs(): CLIOptions
}

interface IInferenceEngine {
    + {abstract} Init(): void
    + {abstract} Execute(): void
    + {abstract} Shutdown(): void
}

interface IImageHelper {
    - {abstract} DecodeImage(): uint8_t[]
    + {abstract} ReadImage(): uint8_t[]
    + {abstract} ResizeImage(): uint8_t[]
    + {abstract} GetImageWidth(): int32_t
    + {abstract} GetImageHeight(): int32_t
    + {abstract} GetImageChannels(): int32_t
}

''' Interface Implementation '''
class ArgumentParser {
    + GetParsedArgs(): CLIOptions
    + ParseArgs(int argc, char** argv): CLIOptions
}

class ImageHelperBase {
    # width: int32_t
    # height: int32_t
    # channels: int32_t
    + GetImageWidth(): int32_t
    + GetImageHeight(): int32_t
    + GetImageChannels(): int32_t
}

class JpegImageHelper {
    - DecodeImage(): uint8_t[]
    - decoder: Decoder
    + ReadImage(): uint8_t[]
    + ResizeImage(): uint8_t[]
}

class BitmapImageHelper {
    - DecodeImage(): uint8_t[]
    - decoder: Decoder
    + ReadImage(): uint8_t[]
    + ResizeImage(): uint8_t[]
}

enum InferenceEngineType {
    kInvalid
    kTFLiteInferenceEngine
}

abstract InferenceEngineBase {
    - cli_options: CLIOptions
    - label_count: int32_t
    - width: int32_t
    - height: int32_t
    - channels: int32_t
    - image_path: string
    - model_path: string
    - label_path: string
    - image_helper: IImageHelper
    # {abstract} GetIntermediateOutput(): (string, string)[]
    # {abstract} GetResults(top_k): (float, int32_t)[]
    # GetImageChannels(): int32_t
    # GetImageData(): uint8_t[]
    # GetImageHeight(): int32_t
    # GetImageWidth(): int32_t
    # GetLabelList(): string[]
    # GetMaxProfilingBufferEntries(): int32_t
    # GetModelPath(): int32_t
    # GetNumberOfThreads(): int32_t
    # GetResultDirectory(): string
    # IsProfilingEnabled(): bool
    # IsVerbosityEnabled(): bool
    + InferenceEngineBase(CLIOption)
}

class TFLiteInferenceEngine {
    - model: FlatModelBuffer
    - interpreter: Interpreter
    - SetInputData(): void
    - InvokeInference(): void
    # GetIntermediateOutput(): (string, string)[]
    # GetResults(top_k): (float, int32_t)[]
    + TFLiteInferenceEngine(CLIOptions)
    + Init(): void
    + Execute(): void
    + Shutdown(): void
}


class Perception {
    - argument_parser: IArgumentParser
    - inference_engine: IInferenceEngine
    + Perception(IArgumentParser*)
    + SelectInferenceEngine(InferenceEngineType): void
    + Init(): void
    + Execute(): void
    + Shutdown(): void
}

''' Relation '''
IArgumentParser <|-down- ArgumentParser
ArgumentParser *-right- CLIOptions

IImageHelper <|-down- ImageHelperBase
ImageHelperBase <|-down- JpegImageHelper
ImageHelperBase <|-down- BitmapImageHelper

JpegImageHelper *-down- Jpeg.Decoder
BitmapImageHelper *-down- Bitmap.Decoder 

IInferenceEngine <|-down- InferenceEngineBase

InferenceEngineBase *-left- IImageHelper
InferenceEngineBase <|-- TFLiteInferenceEngine
' InferenceEngineBase <|-- TFInferenceEngine
' InferenceEngineBase <|-- TorchInferenceEngine

' TFInferenceEngine *-down- tensorflow
' TorchInferenceEngine *-down- torch

TFLiteInferenceEngine *-right- tflite.FlatModelBuffer
TFLiteInferenceEngine *-down- tflite.Interpreter

Perception -right- InferenceEngineType
Perception *-- IInferenceEngine
Perception *-- IArgumentParser
}
@enduml